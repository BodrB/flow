@import url("https://fonts.googleapis.com/css2?family=DynaPuff:wght@400..700&display=swap");
@import "../../app/variables.module.scss";

.wrapper {
  background-color: black !important;

  $border-color: rgba(255, 0, 0, 0.5); // Red color with transparency

  @keyframes rotate {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  :global {
    .react-flow__panel {
      display: none;
    }

    .title {
      font-family: "DynaPuff", system-ui;
      justify-content: center;
      display: flex;
      transition: transform 0.3s ease, opacity 0.3s ease;
      color: white;

      .expandButton {
        padding-left: 5rem;
        display: none;

        @media screen and (max-width: map-get($grid-breakpoints, "md")) {
          display: flex;
        }
      }
    }

    .title-up {
      transform: translateY(-40px); /* Adjust this value as needed */
      opacity: 0; /* Fade out */
    }

    .react-flow__node {
      filter: drop-shadow(0px 0px 5px rgba(0, 0, 0, 0.9))
        drop-shadow(0px 0px 15px rgba(255, 175, 130, 0.7))
        drop-shadow(0px 0px 20px rgba(255, 137, 131, 0.6));

      &:hover {
        filter: drop-shadow(0px 0px 5px rgba(0, 0, 0, 0.9))
          drop-shadow(0px 0px 25px rgba(255, 94, 87, 0.6))
          drop-shadow(0px 0px 15px rgba(255, 60, 50, 0.5));
      }
    }

    .paginationContainer {
      display: flex;
      justify-content: center;
      padding: 1rem 0 1rem 0;
    }

    .button-container {
      border-radius: 10px;
      position: relative; // Ensure that the parent has position relative for absolute positioning to work
      display: flex;
      align-items: center;
      justify-content: center;

      &:hover {
        &::before {
          display: flex !important; // Changing display from block to flex if needed
          opacity: 1 !important;
        }
      }

      &::before {
        opacity: 0; // Initially hidden
        content: "";
        display: block; // Initial display block
        background: linear-gradient(
          90deg,
          rgba(255, 255, 255, 0) 0%,
          rgba(102, 102, 102, 0.75) 50%,
          rgba(255, 255, 255, 0) 100%
        );
        height: 300px;
        width: 50px;
        transform: translate(0);
        position: absolute;
        z-index: 0;
        top: 50%;
        transform-origin: top center;

        :local {
          animation: rotate 5s linear forwards infinite;
        }
      }
    }

    .characters {
      justify-content: center;
      z-index: 3;
      position: relative;
      flex-wrap: wrap;
      padding: 10px 0 0 0;
      display: flex;
      gap: 10px;

      button {
        background: black;
        color: white;
        padding: 10px;
        font-size: 1rem;
        cursor: pointer;

        &:hover {
          color: black !important; // Change text color on hover
          border: 1px solid $border-color; // Set border size and color
        }
      }
    }

    .characterImageDescription {
      overflow: hidden;
      display: flex;
      padding: 0 1rem 0 1rem;

      &.expanded {
        height: 30vh !important;
      }

      @media screen and (max-width: map-get($grid-breakpoints, "md")) {
        height: 0;
      }

      .charImage {
        padding-right: 0.5rem;
      }

      * > p {
        color: white;
      }
    }
  }
}
